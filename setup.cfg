[metadata]
name = report
summary = test project
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://www.openstack.org/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 2.6
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.3
    Programming Language :: Python :: 3.4

[files]
packages =
    report
data_files =
    /etc/report =
        etc/api-paste.ini
    /etc/report =
        etc/report.conf.example
    /etc/report =
        etc/mail_template.xml
    /usr/share/report/font =
        resource/font/SURSONG.TTF
    /usr/share/report/font =
        resource/font/SIMHEI.TTF
    /usr/share/report/logo =
        resource/logo/haiyun.png

[entry_points]

report.api.v1.extensions =
    versions = report.api.controller.v1.versions:Versions
    rptfiles = report.api.controller.v1.rptfiles:ReportFiles
    rpttasks = report.api.controller.v1.rpttasks:ReportTasks

report.storage =
    mysql = report.storage.impl_sqlalchemy:Connection

report.file =
    pdf = report.drawutils.pdfreport:PdfReport
    excel = report.drawutils.excelreport:ExcelReport

report.type =
    alarm = report.agent.task.alarm_task:AlarmTask
    monitor = report.agent.task.monitor_task:MonitorTask
    meter = report.agent.task.meter_task:MeterTask

console_scripts =
    report-api = report.cmd.api:main
    report-agent = report.cmd.agent:main
    report-dbsync = report.cmd.storage:dbsync

[build_sphinx]
source-dir = doc/source
build-dir = doc/build
all_files = 1

[upload_sphinx]
upload-dir = doc/build/html

[compile_catalog]
directory = report/locale
domain = report

[update_catalog]
domain = report
output_dir = report/locale
input_file = report/locale/report.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = report/locale/report.pot
